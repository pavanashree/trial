1 Formatted Division

  #include <iostream>
  #include <sstream>
  using namespace std;

string FormattedDivision(int num1, int num2) { 

  int count=0,rem=0,i,ins_pos=0,k=1,len;
  double num=0;
  string str,str1;
  ostringstream convert;
  num = (double)num1/num2;     
  cout<<num<<" num ";
  convert << num;  
  str = convert.str();
  cout<<str.length()<<" len "<<str<<" str ";
  for(i=(str.length()-1);str[i]!='.';i--);
  cout<<i<<" here ";
  len = i-1;
  for(;i>=0;i--)
  {
    ins_pos = (len-(count+k));
    if(count>0 && count%2==0 && ins_pos>0)
    {
      str.insert(ins_pos,",");
      k++;
    }
    count++; 
  }  
  return str;
} 

exact division point is not coming...
try to round off to 3 positions. so that 0.666666 means 0.6667

***************************************************************************************************
2 Calculator

calc(str,i is o in main)
{
for(;i<str.length();i++)
{
str.find(/);
sum=num1/num2;
str.replace(num1/num2);
}
if(str[i] == '(')
sum=calc(str,i+1)
else if(str[i]==')' && str[i+1]=='(')
return (sum*calci(str,i+2)
replace the result;
else if(str[i]==')')
return sum;





#include <iostream>
using namespace std;

string Calculator(string str) { 

  // code goes here  
    
  return str; 
            
}

int main() { 
  
  // keep this function call here
  cout << Calculator(gets(stdin));
  return 0;
    
} 
***************************************************************************************************

3 Polynomial

#include <iostream>
using namespace std;

string PolynomialExpansion(string str) { 

  // code goes here   
  return str; 
            
}

int main() { 
  
  // keep this function call here
  cout << PolynomialExpansion(gets(stdin));
  return 0;
    
} 

***************************************************************************************************
4 Matrix

#include <iostream>
using namespace std;

string MatrixDeterminant(string strArr[]) { 

  // code goes here   
  return strArr[0]; 
            
}

int main() { 
   
  // keep this function call here
  /* Note: In C++ you first have to initialize an array and set 
     it equal to the stdin to test your code with arrays. 
     To see how to enter arrays as arguments in C++ scroll down */
     
  string A[] = gets(stdin);
  cout << MatrixDeterminant(A);
  return 0;
    
} 


***************************************************************************************************
5 Transitive

#include <iostream>
using namespace std;

string TransitivityRelations(string strArr[]) { 

  // code goes here   
  return strArr[0]; 
            
}

int main() { 
   
  // keep this function call here
  /* Note: In C++ you first have to initialize an array and set 
     it equal to the stdin to test your code with arrays. 
     To see how to enter arrays as arguments in C++ scroll down */
     
  string A[] = gets(stdin);
  cout << TransitivityRelations(A);
  return 0;
    
} 

***************************************************************************************************
6 Alpahabet Run Enryption

#include <iostream>
using namespace std;

string AlphabetRunEncryption(string str) { 

  // code goes here   
  string dummy = str;
  int start=0,end=0,count=0;
  cout<<"Original string "<<str;
  //Eliminate all special symbols.
  for(i=0;i<(str.length()-1);i++)
  { 
    start = i;	
    while((str[i]==(str[i+1]+1)) && ((i+2)<str.length() && str[i+2]!='N'))
	{
	  if(i==(str.length()-1))
	    break;
	  count++;
	  i++;	  
	}
	end=i;
	if(count>0)
	{
	  str.replace(start,count+1,(str[start]-1));
	  str.insert(start+1,1,(str[end]+1));
	}
    // if(str[i]=='N' || str[i]=='S' || str[i]=='L' || str[i]=='R')
  }
  for(i=0;i<(str.length()-1);i++)
    if(str[i]==str[i+1])
	  str.erase(i,1);
  for(i=0;i<str.length();i++)
  {
    switch(str[i])
	{
	case 'N': str.replace(i,1,str[i-1]);
			  break;
	case 'S': if(str[i+3] == 'S')
			  {	
			    str.erase(i-1,2);
				i++;
			  }
			  else
			    str.erase(i,1);		      
			  break;
	case 'L': str.replace(i,1,str[i-1]-1);
			  str.replace(i-1,1,str[i-1]+1);
			  break;
	case 'R': str.replace(i,1,str[i-1]+1);
			  str.replace(i-1,1,str[i-1]-1);	          
			  break;
	}
  }  
  cout<<"After one for loop "<<str;
  for(i=0;i<str.length();i++)
  {
    if(str[i]!=(str[i]+1))	
	{
	
	}
  }
  
  cout<<"Second for loop "<<str;
  return str; 
}

int main() { 
  
  // keep this function call here
  cout << AlphabetRunEncryption(gets(stdin));
  return 0;
    
} 

***************************************************************************************************
7 Shortest Path


***************************************************************************************************

Curent:  465 (Rank 235)
Target:  550
Diff:    85(8)
Possible: 7
NPOS:    15(1 Pgms)
